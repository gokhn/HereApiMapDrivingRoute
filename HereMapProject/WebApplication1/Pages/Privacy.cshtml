@page
@model PrivacyModel
@{
    ViewData["Title"] = "Privacy Policy";
}

<!DOCTYPE html>
<html>
<head>
    <title>HERE Map with Route</title>
    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
    <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
    <style>
        #mapContainer {
            width: 100%;
            height: 600px;
            background: grey;
        }
    </style>
</head>
<body>
    <div id="mapContainer"></div>
    <script>
        // Your HERE Maps API key
        var apiKey = 'K7AOx9x9uokCctvsF_mCHgCN1DGFuib0vSzD91Qb6zE';

        // Data array with locations
        var data = [
            {
                name: "Beşiktaş",
                lat: 41.0430,
                lng: 29.0339
            },
            {
                name: "Kocaeli",
                lat: 40.8533,
                lng: 29.8815
            },
            {
                name: "Balıkesir",
                lat: 39.6484,
                lng: 27.8826
            }
        ];

        // Initialize the platform object:
        var platform = new H.service.Platform({
            apikey: apiKey
        });

        // Obtain the default map types from the platform object
        var defaultLayers = platform.createDefaultLayers();

        // Instantiate (and display) a map object:
        var map = new H.Map(
            document.getElementById('mapContainer'),
            defaultLayers.vector.normal.map,
            {
                zoom: 7,
                center: { lat: 40.5, lng: 29.0 }
            }
        );

        // Enable the event system on the map instance:
        var mapEvents = new H.mapevents.MapEvents(map);

        // Instantiate the default behavior, providing the mapEvents object:
        var behavior = new H.mapevents.Behavior(mapEvents);

        // Create the default UI:
        var ui = H.ui.UI.createDefault(map, defaultLayers);

        // Add markers to the map
        function addMarkersToMap(map) {
            data.forEach(function (location) {
                var marker = new H.map.Marker({ lat: location.lat, lng: location.lng });
                map.addObject(marker);
            });
        }

        // Calculate route between the points
        function calculateRoute(platform, map) {
            var router = platform.getRoutingService(null, 8);
            var routingParameters = {
                'routingMode': 'fast',
                'transportMode': 'car',
                'origin': data[0].lat + ',' + data[0].lng,
                'destination': data[data.length - 1].lat + ',' + data[data.length - 1].lng,
                'via': data.slice(1, -1).map(function (location) {
                    return location.lat + ',' + location.lng;
                }),
                'return': 'polyline,turnByTurnActions,actions,instructions,travelSummary'
            };

            router.calculateRoute(routingParameters, function (result) {
                if (result.routes.length) {
                    var route = result.routes[0];
                    addRouteShapeToMap(route);
                }
            }, function (error) {
                alert('Rota hesaplanamadı: ' + error.message);
            });
        }

        // Add the route shape to the map
        function addRouteShapeToMap(route) {
            var lineString = new H.geo.LineString();

            route.sections.forEach(function (section) {
                // retrieve the polyline string
                var linestring = H.geo.LineString.fromFlexiblePolyline(section.polyline);
                map.addObject(new H.map.Polyline(linestring, {
                    style: { strokeColor: 'blue', lineWidth: 5 }
                }));
            });

            map.getViewModel().setLookAtData({
                bounds: map.getObjects().reduce(function (bbox, obj) {
                    return bbox ? bbox.merge(obj.getBoundingBox()) : obj.getBoundingBox();
                }, null)
            });

        }

        // Call functions to add markers and calculate route
        addMarkersToMap(map);
        calculateRoute(platform, map);
    </script>
</body>
</html>
